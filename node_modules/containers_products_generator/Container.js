const fs = require("fs");
const path = require("path")
const schema_product = require('./schemaValidation')
const { v4: uuidv4 } = require("uuid")
const moment = require('moment')
const { writeFileProductAsync, readFileProductAsync, writeFileCartAsync, readFileCartAsync } = require('./Utilities/fileMethods.js');
const { runInThisContext } = require("vm");

const verifyExistence = file => file && file.length >= 0 ? true : false

class Product {
    constructor() {
        this.pr = [];
    }

    async save(product) {
        try {
            let fileExits = await readFileProductAsync(); //String
            if (verifyExistence(fileExits)) {
                let dataFile = JSON.parse(fileExits);
                product.id = uuidv4()
                product.timestmap = moment(Date.now()).format('MMMM Do YYYY, h:mm:ss a')
                const value = schema_product.validate(product)
                dataFile.push(product);
                this.pr = dataFile;
                writeFileProductAsync(this.pr,);
                return product.id
            }
        } catch (e) {
            product.id = uuidv4()
            product.timestmap = moment(Date.now()).format('MMMM Do YYYY, h:mm:ss a')
            this.pr.push(product)
            writeFileProductAsync(this.pr)
            return product.id
        }
    }

    async getById(id) {
        let fileExits = await readFileProductAsync(); // tipo de dato string
        if (fileExits && fileExits.length >= 0) {
            let dataFile = JSON.parse(fileExits);
            for (let d of dataFile) {
                if (d.id === id) {
                    return d;
                }
            }
        }
        return null

    }
    async updateById(id, name, description, url, price, stock) {
        let fileExits = await readFileProductAsync(); // tipo de dato string
        if (fileExits && fileExits.length >= 0) {
            let dataFile = JSON.parse(fileExits); // type object
            for (let d of dataFile) {
                if (d.id === id) {
                    d.name = name
                    d.description = description
                    d.url = url
                    d.price = price
                    d.stock = stock
                    this.pr = dataFile
                    writeFileProductAsync(dataFile)
                    return d;
                }

            }

        }
        return null

    }
    async getAll() {
        let fileExits = await readFileProductAsync(); // tipo de dato string
        if (fileExits && fileExits.length >= 0) {
            let dataFile = JSON.parse(fileExits);
            return dataFile
        }
        throw " get-All No se encontro archivo"
    }

    async deleteByID(id) {
        let fileExits = await readFileProductAsync(); // tipo de dato string
        if (verifyExistence(fileExits)) {
            let dataFile = JSON.parse(fileExits); // objecto
            let idExist = dataFile.filter(d => d.id == id) // Devuelve un Array/ si no existe devuelve un array vacio
            let newElements = dataFile.filter(d => d.id !== id)
            if (idExist.length > 0) {
                writeFileProductAsync(newElements)
                return newElements
            }
            throw `theres no such id in the repo, but you can see all the products below:
            ${JSON.stringify(dataFile, null, 2)}`
        }
        throw "delete-by-id No se encontro archivo"
    }

    async deleteAll() {
        let fileExits = await readFileProductAsync(); // tipo de dato string
        if (fileExits && fileExits.length >= 0) {
            this.pr = []
            await fs.promises.rm(path.join(__dirname, "/productos.txt"))
            return `The Elements has been deleted`
        }
        throw "No se encontro archivo"
    }
}

class Cart {
    constructor() {
        this.cart = []
    }

    async createCart() {
        let cart = {
            id: uuidv4(),
            product: []
        }
        try {
            const file = await readFileCartAsync()// string
            if (verifyExistence(file)) {
                const data = JSON.parse(file)
                data.push(cart)
                this.cart = data
                writeFileCartAsync(data)
                return data
            }
        } catch (e) {
            this.cart.push(cart)
            writeFileCartAsync(this.cart)
            return cart.id
        }
    }
    async deleteCart() {
        this.cart = {}
        await fs.promises.rm(path.join(__dirname, "/cart.txt"))
        return `The Elements has been deleted`
    }
    async showAllItems() {
        const file = await readFileCartAsync()// string
        const data = JSON.parse(file)
        this.cart = data
        return data
    }
    async addItems(id, product) {
        const file = await readFileCartAsync()// string
        const data = JSON.parse(file)
        console.log(data)
        for (let d of data) {
            if (d.id == id) {
                d.product.push(product)
                this.cart = data
                writeFileCartAsync(data)
                return 'Item has been added succesfully'
            }
        }

    }
    async deleteItem(idCart, idProduct) {
        const file = await readFileCartAsync()// string
        const data = JSON.parse(file)
        for (let d of data) {
            if (d.id == idCart) {
                let newArray=d.product.filter(p => p.id !== idProduct)
                console.log(newArray)
                d.product=newArray
                writeFileCartAsync(data)
                return `product has been deleted from the data base succesfully new Dataset: ${d.product}`;
            }
        }
    }
}

module.exports = { Product, Cart }